/**
 * diff算法
 * 作用: vue rect等框架计算出virtual DOM 真正变化的部分，并针对该部分进行原生DOM操作、而非重新渲染整个页面
 * 过去式: 循环递归，对节点进行依次对比，算法复杂度达到O(n^3)
 * 调和：VD 转化为CD的最少操作过程
 * react diff: 调和的具体实现
 * 
 * diff 策略
 * (1)、 tree diff
 * webUI 中跨层级的移动操作特别少，忽略不计。只有创建和删除节点
 * 作用：通过updateDepth层级控制
 * (2)、component diff
 * 拥有相同类的两个组件生成相识的树形结构，拥有不同类的两个组件，生成不同的属性结构
 * 作用： 
 *      1、同一类型的两个组件，按原策略继续比较
 *      2、同一类型组件，A变化为B，VD可能不发生变化，用户可知是否变化，可通过shouldComponentUpdate()来判断是否需要判断计算
 *      3、不同类型的组件替换，将一个判断为脏组件，替换整个组件所有节点
 * (3)、element diff 
 * 对于同一层级的一组子节点，通过唯一id区分，同一层级，diff提供删除、插入、移动3种操作，通过判断 index < lastIndex 移动该节点
 */


 function reactDiff() {
     
 }
